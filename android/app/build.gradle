plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.10'
}

def applicationName = "CFScanner"

android {
    namespace 'ir.filternet.cfscanner'
    compileSdk 33

    defaultConfig {
        applicationId "ir.filternet.cfscanner"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=29"
            }
        }


        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').canRead()) {
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
        }


        buildConfigField "String", "FrontingAddress", properties.getProperty('fronting_address', '"speed.cloudflare.com"')
        buildConfigField "String", "appName", "\"$applicationName\""
        setProperty("archivesBaseName", "$applicationName-V$versionName-C$versionCode")
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk false
        }
        abi {
            enable true
            universalApk true
        }
    }
}

ext.abiCodes = ['armeabi-v7a': 1, x86: 2, x86_64: 3, 'arm64-v8a': 4]
import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseAbiVersionCode != null) {
            output.outputFileName = "$applicationName-V$versionName-C$versionCode-${variant.name}-${output.getFilter(OutputFile.ABI)}.apk"
        } else {
            output.outputFileName = "$applicationName-V$versionName-C$versionCode-${variant.name}-all.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.aar", "*.jar"])

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'

    // KTx
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.activity:activity-ktx:1.4.0'

    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    kapt 'androidx.lifecycle:lifecycle-common-java8:2.4.1'

    // compose
    implementation "androidx.compose.material:material-icons-extended:1.3.1"
    implementation 'io.coil-kt:coil-compose:2.0.0-rc02'
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation "androidx.compose.animation:animation:$compose_ui_version"
    implementation "androidx.compose.animation:animation-core:$compose_ui_version"
    implementation "androidx.compose.animation:animation-graphics:$compose_ui_version"
    implementation "androidx.navigation:navigation-compose:2.6.0-alpha06"

    // google
    implementation platform('com.google.firebase:firebase-bom:31.2.2')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // ok http
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation 'com.google.code.gson:gson:2.8.9'


    implementation("me.dm7.barcodescanner:core:1.9.8") {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation("me.dm7.barcodescanner:zxing:1.9.8") {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-v4'
    }


    def room_version = "2.5.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"


    // accompanist compose application
    var accompanist_version = '0.29.2-rc'
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"


    //hilt
    def hilt_version = '2.45'
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    //kotprof
    implementation 'com.chibatching.kotpref:kotpref:2.13.1'
    implementation 'com.chibatching.kotpref:gson-support:2.13.1'

    // log tool
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // barcode scanner
    def camerax_version = "1.0.2"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:1.3.0-alpha04"
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'

    // rxjava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'

    implementation 'io.github.2307vivek:seeker:1.0.2'


    implementation 'org.jetbrains.kotlin:kotlin-script-runtime:1.7.21'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'


}